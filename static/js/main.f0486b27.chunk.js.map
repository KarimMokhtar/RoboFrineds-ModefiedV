{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","props","robot","className","src","name","alt","email","CardList","robots","search","map","key","id","SearchBox","onSearchChange","type","placeholder","value","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","Header","React","memo","console","log","App","searchField","useSelector","searchRobots","requestRobots","isPending","dispatch","useDispatch","loadRobots","useCallback","a","fetch","then","res","json","data","payload","catch","err","useEffect","searchedRobots","trim","length","filter","toLowerCase","includes","event","target","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","rootReducer","combineReducers","action","store","createLogger","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f0486b27.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = (props) => {\r\n  const { robot } = props;\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img\r\n        src={`https://robohash.org/${robot.name}?size=200x200`}\r\n        alt={robot.name}\r\n      />\r\n      <div>\r\n        <h2>{robot.name}</h2>\r\n        <p>{robot.email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots, search }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((robot) => (\r\n        <Card robot={robot} key={robot.id} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ onSearchChange, search }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        value={search}\r\n        onChange={onSearchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"800px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooops. That is not good</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Header = React.memo(() => {\r\n    console.log('header')\r\n    \r\n    return(\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n    )\r\n})\r\n\r\nexport default Header;","import React, { useEffect, useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport Header from '../components/Header';\r\nimport \"./App.css\";\r\n\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nconst App = () => {\r\n  const searchField = useSelector((state) => state.searchRobots.searchField);\r\n  const { robots, isPending } = useSelector((state) => state.requestRobots);\r\n  const dispatch = useDispatch();\r\n\r\n  const loadRobots = useCallback(async () => {\r\n    await dispatch(requestRobots());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    loadRobots();\r\n  }, [loadRobots]);\r\n\r\n  const handleSearch = (event) => {\r\n    const value = event.target.value;\r\n    dispatch(setSearchField(value));\r\n  };\r\n  if (isPending) return <h1>Loading...</h1>;\r\n\r\n  let searchedRobots = [];\r\n  if (searchField.trim().length) {\r\n    searchedRobots = robots.filter((robot) =>\r\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n  } else {\r\n    searchedRobots = [...robots];\r\n  }\r\n  return (\r\n    <div className=\"tc\">\r\n      <Header />\r\n      <SearchBox onSearchChange={handleSearch} search={searchField} />\r\n      <Scroll>\r\n        <ErrorBoundry>\r\n          <CardList robots={searchedRobots} />\r\n        </ErrorBoundry>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((res) => res.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((err) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  robots: [],\r\n  isPending: false,\r\n  error: \"\",\r\n};\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport \"tachyons\";\r\n\r\nimport App from \"./containers/App\";\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst rootReducer = combineReducers({\r\n  searchRobots: searchRobots,\r\n  requestRobots: requestRobots,\r\n});\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware)\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}