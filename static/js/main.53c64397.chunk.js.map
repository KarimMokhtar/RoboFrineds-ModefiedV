{"version":3,"sources":["components/Card.tsx","components/CardList.tsx","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundry.js","components/MainPage.js","containers/App.tsx","redux/actions/requestActions.ts","redux/constants.ts","redux/actions/searchActions.ts","redux/reducers/searchReducer.ts","redux/reducers/requestReducer.ts","redux/reducers/rootReducer.tsx","redux/store.tsx","serviceWorker.js","index.tsx"],"names":["Card","name","email","className","src","alt","CardList","robots","map","robot","key","id","SearchBox","onSearchChange","type","placeholder","aria-label","onChange","Scroll","props","style","overflowY","border","height","children","CounterButton","React","memo","useState","count","setCount","color","onClick","Header","console","log","ErrorBoundary","state","hasError","error","info","this","setState","Component","MainPage","filterRobots","filter","toLowerCase","includes","searchField","loadRobots","isPending","handleSearch","searchedRobots","trim","length","App","useSelector","searchRobots","requestRobots","dispatch","useDispatch","useCallback","a","fetch","then","res","json","data","payload","catch","err","event","value","target","initialStateSearch","action","initialState","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.53c64397.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface ICard {\n  name: string;\n  email: string;\n}\nconst Card: React.FC<ICard> = ({ name, email }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${name}?size=200x200`} alt={name} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\ninterface ICardList {\n  robots: Array<any>;\n}\nconst CardList: React.FC<ICardList> = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((robot) => (\n        <Card email={robot.email} name={robot.name} key={robot.id} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ onSearchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        aria-label=\"Search robots\"\n        onChange={onSearchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: 'scroll',\n        border: '1px solid black',\n        height: '800px',\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { useState } from 'react';\n\nconst CounterButton = React.memo((props) => {\n  const [count, setCount] = useState(0);\n  return (\n    <button\n      id=\"counter\"\n      className={`clicks-${count}`}\n      color={props.color}\n      onClick={() => setCount((count) => count + 1)}\n    >\n      Count: {count}\n    </button>\n  );\n});\n\nexport default CounterButton;\n","import React from 'react';\nimport CounterButton from './CounterButton';\n\nconst Header = React.memo(() => {\n  console.log('header');\n\n  return (\n    <>\n      <h1 className=\"f1\">RoboFriends</h1>\n      <CounterButton color={'red'} />\n    </>\n  );\n});\n\nexport default Header;\n","import React, { Component } from 'react';\n\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n","import React from 'react';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nclass MainPage extends React.Component {\n  componentDidMount() {\n    this.props.loadRobots();\n  }\n  filterRobots = () => {\n    return this.props.robots.filter((robot) =>\n      robot.name.toLowerCase().includes(this.props.searchField.toLowerCase())\n    );\n  };\n  render() {\n    const { isPending, searchField, robots, handleSearch } = this.props;\n    if (isPending) return <h1>Loading...</h1>;\n    let searchedRobots = [];\n    if (searchField.trim().length) {\n      searchedRobots = this.filterRobots();\n    } else {\n      searchedRobots = [...robots];\n    }\n    return (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox onSearchChange={handleSearch} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={searchedRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.css';\nimport { AppState } from '../redux/reducers/rootReducer';\nimport { setSearchField } from '../redux/actions/searchActions';\nimport { requestRobots } from '../redux/actions/requestActions';\nimport MainPage from '../components/MainPage';\n\nconst App: React.FC = () => {\n  const searchField = useSelector(\n    (state: AppState) => state.searchRobots.searchField\n  );\n  const { robots, isPending } = useSelector(\n    (state: AppState) => state.requestRobots\n  );\n  const dispatch = useDispatch();\n\n  const loadRobots = useCallback(async () => {\n    await dispatch(requestRobots());\n  }, [dispatch]);\n\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    dispatch(setSearchField(value));\n  };\n  return (\n    <MainPage\n      searchField={searchField}\n      isPending={isPending}\n      robots={robots}\n      handleSearch={handleSearch}\n      loadRobots={loadRobots}\n    />\n  );\n};\n\nexport default App;\n","import {\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from '../constants';\n\nexport interface IRequestRobotsSuccess {\n  readonly type: 'REQUEST_ROBOTS_SUCCESS';\n  payload: Array<any>;\n}\nexport interface IRequestRobotsPending {\n  readonly type: 'REQUEST_ROBOTS_PENDING';\n  payload?: any;\n}\nexport interface IRequestRobotsFailed {\n  readonly type: 'REQUEST_ROBOTS_FAILED';\n  payload: any;\n}\nexport type RequestActions =\n  | IRequestRobotsFailed\n  | IRequestRobotsPending\n  | IRequestRobotsSuccess;\n\nexport const requestRobots = () => (dispatch: any) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  return fetch('https://jsonplaceholder.typicode.com/users')\n    .then((res) => res.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((err) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import { CHANGE_SEARCH_FIELD } from '../constants';\nexport interface ISetSearchFieldAction {\n  readonly type: 'CHANGE_SEARCH_FIELD';\n  payload: string;\n}\nexport type SearchActions = ISetSearchFieldAction;\n\nexport const setSearchField = (text: string) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n","import { CHANGE_SEARCH_FIELD } from '../constants';\nimport { SearchActions } from '../actions/searchActions';\n\ntype SearchState = {\n  searchField: string;\n};\nconst initialStateSearch: SearchState = {\n  searchField: '',\n};\n\nconst searchRobots = (\n  state: SearchState = initialStateSearch,\n  action: SearchActions\n) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\nexport default searchRobots;\n","import {\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from '../constants';\nimport { RequestActions } from '../actions/requestActions';\ntype RequestState = {\n  robots: Array<any>;\n  isPending: boolean;\n  error?: any;\n};\nconst initialState: RequestState = {\n  robots: [],\n  isPending: false,\n  error: '',\n};\n\nexport const requestRobots = (\n  state: RequestState = initialState,\n  action: RequestActions\n) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n\n    default:\n      return state;\n  }\n};\nexport default requestRobots;\n","import { combineReducers } from 'redux';\n// import { createLogger } from \"redux-logger\";\nimport searchRobots from './searchReducer';\nimport requestRobots from './requestReducer';\n\nconst rootReducer = combineReducers({\n  searchRobots: searchRobots,\n  requestRobots: requestRobots,\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n// import { createLogger } from \"redux-logger\";\n\nimport rootReducer from './reducers/rootReducer';\n// const logger = createLogger();\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'tachyons';\n\nimport App from './containers/App';\nimport { store } from './redux/store';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root') as HTMLElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}